{
    // this is the name of the template as it will be shown in the dropdown menu
    "name": "Template",

    // this section describes the interface section shown in the perform submission section
    "interface": {

	// the introductory section is defined here
	"intro": {

	    // title of the submission pipeline section
	    "title": "submission pipeline name",
	    
	    // text paragraph below the title
	    "text": "description of what your submission pipeline does here",

	    // the template downloaded through the buttons that can be enabled here
	    // is generated from the "metadata" section below

	    // setting this to true will show the excel template button
	    "excel": true,

	    // setting this to true will show the json template button
	    "json": false
	},

	// the inputs section defines the input fields in the submission pipeline section
	// each entry in this array represents one input field
	"inputs": [ 

	    // this dropdown box shows metadata files
	    { 
		// the type defines the appearance of the input field
		"type": "dropdown",

		// this list specifies the file endings that the list is filled with
		// if the input field is not supposed to be filled with files from the
		// staging area, set this to null
		"filetype": [ "xlsx" ],

		// the label of the input field
		"label": "select genome metadata file",

		// help text displayed on the input field
		"help": null,

		// index of the default value to be selected
		"default": null,

		// data to fill a list with. This is a list of hashes with value and label
		// keys to fill the dropdown with
		"data": null,

		// if this is set to true, a metadata validation button is shown
		// next to the input field
		"isMetadata": true,

		// this is the variable name to be used in the AWE workflow
		// the value of this field will replace the variable before submission to
		// the workflow
		"aweVariable": "METADATA"
	    },

	    // this will create the input file box
	    {

		// multiselect is a file selection input
		"type": "multiselect",

		// this filetype attribute defines multiple valid file types
		// all files in the staging area with this ending will be selectable
		// in this input
		"filetype": [ "fasta", "fna" ],

		// the label of the file selection
		"label": "select sequence file(s)",

		// the help text displayed next to the input
		"help": null,
		
		// the default selection, this is not available for file selects
		"default": null,

		// the data to fill the select with, this is also
		// ignored for file selects
		"data": null,

		// this is not a metadata file, set the isMetadata to false
		"isMetadata": false,

		// the AWE workflow variable that will be replaced by the selected
		// file
		"aweVariable": "INPUTFILE"
	    }
	]
    },

    // this section contains the AWE workflow
    // only the tasks section of the workflow must be given, the rest will be automatically generated
    // variables named in the inputs part of the interface section can be used anywhere within the workflow
    // and must be encased with ## tags
    // the variables WORKSPACE, WORKSPACEURL and SHOCK are reserved variables that will always be filled
    // automatically
    "awe": {

	// each task in this list will be executed by the pipeline
	"tasks": [
	    {

		// this is the command that is invoked
		"cmd": {

		    // the arguments passed to the command
		    // file arguments must be prefixed with @ and their name is defined in the inputs section below
		    "args": "--inputfile @inputfile --ws-name ##WORKSPACE## --metadatafile @metadatafile --ws-url ##WORKSPACEURL##",

		    // this description will be shown in the hoverover of the stage dot in the status
		    // display of the pipeline jobs
		    "description": "get the input data and create a workspace object from it",

		    // this is the name of the AWE script called
		    // this script must exist on the AWE client machine. If you create your own AWE scripts,
		    // they should be placed in the awe directory in the uploader repository
		    "name": "myAWEscript",

                    // this puts the KBase Authentication token into the environment of the script
                    "environ": {"private":{"KB_AUTH_TOKEN":"##TOKEN##"}}
		},

		// taskid of the tasks that need to be successfully completed before this task
		// can run. This may be a comma separated list.
		"dependsOn": [ ],

		// hash of input files passed to the script, the key being the name of the input parameter
		// this name must be used in the args section above, preceeded by @
		"inputs": {

		    // the file host will always be shock, the SHOCK url will be automatically set
		    // the node id will be filled from a file select input in the interface
		    // which needs to have the aweVariable attribute set to the node value (in this
		    // case INPUTFILE, encased by ##
		    "inputfile": {
			"host": "##SHOCK##",
			"node": "##INPUTFILE##"
		    },
		    "metadatafile": {
			"host": "##SHOCK##",
			"node": "##METADATA##"
		    }
		},

		// numerical id of this task to be used as a reference in depensOn lists
		"taskid": "0",

		// the total amount of workunits. This should normally be 1.
		"totalwork": 1
	    }
	]
    },

    // this section describes the metadata template. It is used to define the structure of the information
    // about the data to be imported. It is also used to generate Excel spreadsheets for input of this information
    // and to validate submitted data
    "metadata": {

	// this is used as the filename of the downloaded Excel spreadsheet
	"name": "KBaseGenomeTemplate",

	// this may be used to label the template (currently optional)
	"label": "KBase Genome Metadata Template",

	// a short description about the object described by this metadata (currently optional)
	"description": "Template to specify meta data for loading a genome from a FASTA sequence file to a KBaseGenomes.Genome typed object in a workspace",

	// a list of controlled vocabularies used in validation of data matching this template
	"cvs": {

	    // each key represents one controlled vocabulary
	    // each vocabulary is a hash of valid terms pointing to true
            "domain": {
		"Bacteria":true,
		"Archaea":true,
		"Eukaryota":true,
		"Unknown":true
            },

	    "gender": {
		"male": true,
		"female": true
	    }
	},

	// each group represents one sheet in the Excel workbook
	"groups" : {

	    // this is an example group
            "main": {

		// unique name of this group
		"name":"main",

		// label (used as sheet name)
		"label":"Basic Info",

		// a short description of this group
		"description":"basic information",

		// boolean indicating whether this group must be present
		"mandatory": true,

		// if set to true, this is a root group. Otherwise it may be a group within
		// another group (nested)
		"toplevel":true,

		// hash of groups that are contained within this group
		"subgroups": {},

		// list of fields in this group
		"fields":{

		    // each field has a set of attributes
                    "field_a": {

			// unique name of the field
			"name":"scientific_name",

			// label of the field, used in the spreadsheet
			"label":"Scientific Name",

			// a short description of the field, also used in the spreadsheet
			"description":"the scientific name of the genome",

			// type of the value, this may be used by autogenerated interfaces to
			// generate an input mask for this field
			"type":"text",

			// default to be filled in if the user did not supply a value
			"default":"Unknown",

			// if this is true, the user must fill in this value in order for
			// the data to validate against the template
			"mandatory":"true",

			// type of how this field should be validated, can be either cv or regexp
			"validation": { "type":"none" },

			// index used to order the fields in the spreadsheet
			"index": 0
                    },

		    // this field is using a controlled vocabulary
                    "domain": {
			"name":"domain",
			"label":"Domain",
			"description":"the domain of the genome",
			"type":"text",
			"default":"Unknown",
			"mandatory":"true",

			// the validation type is set to cv, the value is set to domain. Hence the validator
			// will check the cvs section of this template for the domain cv
			// data for this field will only be valid if the term is listed in the domain cv
			"validation": { "type":"cv", "value":"domain" },
			"index": 1
                    }
		}
            }
	}
    }
}
